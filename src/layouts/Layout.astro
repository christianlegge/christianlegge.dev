---
export interface Props {
	title: string;
	mainClass?: string;
}

import NavLink from "../components/NavLink.astro";

const pages = ["Projects", "Experience", "Blog", "Contact"];

const { title, mainClass } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/apple-touch-icon.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="32x32"
			href="/favicon-32x32.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="16x16"
			href="/favicon-16x16.png"
		/>
		<link rel="manifest" href="/site.webmanifest" />
		<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#1b6d17" />
		<meta name="msapplication-TileColor" content="#00a300" />
		<meta name="theme-color" content="#ffffff" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<header
			class="flex h-24 items-center justify-between px-8 shadow shadow-green-900 md:grid md:grid-cols-2 lg:grid-cols-3"
		>
			<div>
				<h1 class="w-fit text-4xl font-black">
					<a href="/">Christian Legge</a>
				</h1>
				<h2
					class="text-md w-fit font-light tracking-wide text-gray-600"
				>
					<a href="/">Engineer, Programmer, Person</a>
				</h2>
			</div>
			<nav>
				<ul
					class="hidden w-full items-center justify-center gap-8 text-lg font-bold uppercase italic tracking-wider text-green-900 md:flex"
				>
					{pages.map((page) => <NavLink page={page} />)}
				</ul>
				<div
					class="flex h-5 w-8 cursor-pointer flex-col justify-between md:hidden"
					id="nav-hamburger"
				>
					<div
						class="h-1/5 w-full bg-green-900 transition-all"
						id="hamburger-top"
					>
					</div>
					<div class="h-1/5 w-full bg-green-900"></div>
					<div
						class="h-1/5 w-full bg-green-900 transition-all"
						id="hamburger-bottom"
					>
					</div>
				</div>
				<div
					class="absolute top-28 right-4 isolate z-50 translate-x-60 bg-background px-8 py-8 shadow-md shadow-green-900 transition-all md:hidden"
					id="nav-popup"
				>
					<ul
						class="relative z-50 flex w-full flex-col items-center justify-center gap-8 text-lg font-bold uppercase italic tracking-wider text-green-900"
					>
						{pages.map((page) => <NavLink page={page} />)}
					</ul>
				</div>
			</nav>
			<div
				class="hidden items-center justify-end text-lg font-semibold text-gray-600 lg:flex"
			>
				<div class="px-2 pt-1">
					<div class="absolute h-2 w-2 rounded-full bg-green-500">
					</div>
					<div class="h-2 w-2 animate-ping rounded-full bg-green-500">
					</div>
				</div>
				<span>Looking for work</span>
			</div>
		</header>
		<main
			class={`mx-auto lg:px-16 px-8 py-12 max-w-[100ch] z-0 relative ${
				mainClass ?? ""
			}`}
		>
			<slot />
		</main>
	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			#da62c4 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #f6f6f6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
			DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
	}
	.arrow-top {
		@apply translate-x-3 translate-y-1 rotate-[45deg] scale-x-50;
	}
	.arrow-bottom {
		@apply translate-x-3 -translate-y-1 rotate-[-45deg] scale-x-50;
	}
</style>
<script>
	function toggleNavPopup() {
		const el = document.getElementById("nav-popup");
		const top = document.getElementById("hamburger-top");
		const bottom = document.getElementById("hamburger-bottom");
		if (el && top && bottom) {
			el.classList.toggle("translate-x-60");
			top.classList.toggle("arrow-top");
			bottom.classList.toggle("arrow-bottom");
		}
	}
	function hideNavPopup() {
		const el = document.getElementById("nav-popup");
		const top = document.getElementById("hamburger-top");
		const bottom = document.getElementById("hamburger-bottom");
		if (el && top && bottom) {
			el.classList.add("translate-x-60");
			top.classList.remove("arrow-top");
			bottom.classList.remove("arrow-bottom");
		}
	}
	const navToggle = document.getElementById("nav-hamburger");
	const navPopup = document.getElementById("nav-popup");
	if (navToggle && navPopup) {
		navToggle.addEventListener("click", toggleNavPopup);
		document.addEventListener("click", function (event) {
			if (
				!navToggle.contains(event.target as Node) &&
				!navPopup.contains(event.target as Node)
			) {
				hideNavPopup();
			}
		});
	}
</script>
